import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

android {
    compileSdkVersion 19
    buildToolsVersion "23.0.0"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src','contrib/commons-math3-3.2-src/src/main/java']
            res.srcDirs = ['res']
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }

        androidTest.setRoot('androidTest')
        test.setRoot('unitTest')
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn nativeLibsToJar
    }

    task nativeLibsToJar(type: Zip, dependsOn: 'buildNative', description: 'Create a JAR of the native libs') {
        destinationDir new File(buildDir, 'libs')
        baseName 'ndk-libs'
        extension 'jar'
        from(new File(buildDir, 'libs')) { include '**/*.so' }
        into 'lib/'
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        println('executing ndkBuild')
        def ndkDir = android.ndkDirectory
        def ndkCmd = Os.isFamily(Os.FAMILY_WINDOWS) ? "ndk-build.cmd" : "ndk-build"
        commandLine "$ndkDir/$ndkCmd",
                '-C', file('jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = android.ndkDirectory
        def ndkCmd = Os.isFamily(Os.FAMILY_WINDOWS) ? "ndk-build.cmd" : "ndk-build"
        commandLine "$ndkDir/$ndkCmd",
                '-C', file('jni').absolutePath,
                'clean'
    }

    clean.dependsOn 'cleanNative'

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "GearVRf"
        property "sonar.projectKey", "org.gearvrf"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/testDebugUnitTest.exec"
        property "sonar.sources", "src"
        property "sonar.tests", "unitTest"
        property "sonar.junit.reportsPath", "${project.buildDir}/test-results/debug/"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.java.binaries", "${project.buildDir}/intermediates/classes/debug/"
    }
}

task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir: '${project.buildDir}/intermediates/classes/debug',
            excludes: [
                    '**/R*.class',
                    '**/BuildConfig*'
            ]
    )

    sourceDirectories = files('src')
    executionData = files('${project.buildDir}/jacoco/testDebugUnitTest.exec')

    doFirst {
        files('${project.buildDir}/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

dependencies {
    compile files('libs/SystemUtils.jar')
    compile files('libs/VrApi.jar')
    compile files('libs/VrAppFramework.jar')
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
}
